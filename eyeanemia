import pandas as pd
import numpy as np
import os
from PIL import Image
from tqdm.notebook import tqdm
from sklearn.utils import shuffle
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import tensorflow as tf
from tensorflow.keras import layers, models
from sklearn.model_selection import train_test_split


anemiapath = 'eyeanemia/Anemia (95)'
nonanemiapath = 'eyeanemia/Non Anemia (123)'


anemia_image_paths = [os.path.join(anemiapath, filename) for filename in tqdm(os.listdir(anemiapath))]
anemia_labels = [1] * len(anemia_image_paths)

non_anemia_image_paths = [os.path.join(nonanemiapath, filename) for filename in tqdm(os.listdir(nonanemiapath))]
non_anemia_labels = [0] * len(non_anemia_image_paths)


image_paths = anemia_image_paths + non_anemia_image_paths
labels = anemia_labels + non_anemia_labels
df = pd.DataFrame({"Image": image_paths, "Label": labels})


x_train, x_test = train_test_split(df, test_size=0.2, random_state=42)
y_train = np.array(x_train['Label'])
y_test = np.array(x_test['Label'])

def extract_features(images):
    features = []
    for image in tqdm(images):
        img = load_img(image)
        img = img.resize((224, 224), Image.LANCZOS)
        img = np.array(img)
        features.append(img)
    features = np.array(features)
    features = features.reshape(len(features), 224, 224, 3)
    return features

x = extract_features(x_train['Image'])
x = x / 255.0  # Normalize pixel values


model = models.Sequential()
model.add(layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(224, 224, 3)))
model.add(layers.MaxPooling2D(pool_size=(2, 2)))
model.add(layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(layers.MaxPooling2D(pool_size=(2, 2)))
model.add(layers.Conv2D(filters=128, kernel_size=(3, 3), activation='relu'))
model.add(layers.MaxPooling2D(pool_size=(2, 2)))
model.add(layers.Conv2D(filters=256, kernel_size=(3, 3), activation='relu'))
model.add(layers.MaxPooling2D(pool_size=(2, 2)))
model.add(layers.Flatten())
model.add(layers.Dense(256, activation='relu'))
model.add(layers.Dropout(0.3))
model.add(layers.Dense(1, activation='sigmoid'))


model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(x=x, y=y_train, batch_size=32, epochs=10, validation_split=0.2)

def predict_anemia(image_path):
    try:
        img = Image.open(image_path).resize((224, 224))
        img_array = img_to_array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)

        prediction = model.predict(img_array)
        threshold = 0.5
        prediction_classes = 1 if prediction[0][0] > threshold else 0

        if prediction_classes == 1:
            print("Anemia Detected!")
        else:
            print("No Anemia Detected.")
    except Exception as e:
        print(f"Error loading image: {e}")

if __name__ == "__main__":
    image_path = input("Enter the path of the image for anemia detection: ")
    predict_anemia(image_path)